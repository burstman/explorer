package auth

import (
	"explorer/app/views/layouts"
	v "github.com/anthdm/superkit/validate"
)

type LoginIndexPageData struct {
	FormValues LoginFormValues
	FormErrors v.Errors
}

type LoginFormValues struct {
	Email    string `form:"email"`
	Password string `form:"password"`
}

templ LoginIndex(data LoginIndexPageData) {
	@layouts.BaseLayout() {
		<section class="relative min-h-screen bg-cover bg-center" style="background-image: url('https://images.unsplash.com/photo-1500673922987-e212871fec22?auto=format&fit=crop&w=2000&q=80')">
			//<section class="relative h-screen bg-cover bg-center" style="background-image: url('https://images.unsplash.com/photo-1512253965851-b72114c0f7dd?auto=format&fit=crop&w=2000&q=80')">
			//<section class="relative h-screen bg-red-500">
			<!-- Overlay -->
			<div class="absolute inset-0 bg-black/60"></div>
			<!-- Centered Login Card -->
			<div class="relative z-10 flex justify-center px-4 pt-20">
				<div class="w-full max-w-md  bg-white/90 border border-white/10 rounded-2xl p-8 shadow-lg flex flex-col gap-8">
					<h2 class="text-center text-2xl font-semibold text-black">Login to Explorer</h2>
					@LoginForm(data.FormValues, data.FormErrors)
					<a
						class="text-sm text-center underline text-black/70 hover:text-green-700 transition duration-200"
						hx-get="/signup"
						hx-target="#main-content"
						hx-swap="innerHTML"
					>
						Don't have an account? Signup here.
					</a>
				</div>
			</div>
		</section>
	}
}

templ LoginForm(values LoginFormValues, errors v.Errors) {
	<form hx-post="/login" class="flex flex-col gap-5">
		<div class="flex flex-col gap-2">
			<label for="email" class="text-sm text-black">Email *</label>
			<input
				{ inputAttrs(errors.Has("email"))... }
				name="email"
				id="email"
				value={ values.Email }
				class="bg-white/10 border border-white/20 text-black px-4 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400"
			/>
			if errors.Has("email") {
				<div class="text-red-500 text-xs">{ errors.Get("email")[0] }</div>
			}
		</div>
		<div class="flex flex-col gap-2">
			<label for="password" class="text-sm text-black">Password *</label>
			<input
				{ inputAttrs(errors.Has("password"))... }
				type="password"
				name="password"
				id="password"
				class="bg-white/10 border border-white/20 text-white px-4 py-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-400"
			/>
			if errors.Has("password") {
				<ul class="list-disc ml-4">
					for _, err := range errors.Get("password") {
						<li class="text-red-500 text-xs">password { err }</li>
					}
				</ul>
			}
			if errors.Has("credentials") {
				<div class="text-red-500 text-xs">{ errors.Get("credentials")[0] }</div>
			}
			if errors.Has("verified") {
				<div class="text-red-500 text-xs">{ errors.Get("verified")[0] }</div>
			}
		</div>
		<button
			{ buttonAttrs()... }
			class="bg-green-500 hover:bg-green-600 text-white py-2 rounded-lg font-medium transition"
		>
			Login
		</button>
	</form>
}

func buttonAttrs() templ.Attributes {
	class := "inline-flex text-primary-foreground items-center justify-center px-4 py-2 font-medium text-sm tracking-wide transition-colors duration-200 rounded-md bg-primary text-foreground hover:bg-primary/90 focus:ring focus:ring-primary focus:shadow-outline focus:outline-none"
	return templ.Attributes{
		"class": class,
	}
}

func inputAttrs(hasError bool) templ.Attributes {
	class := "flex w-full px-3 py-2 bg-transparent text-sm border rounded-md ring-offset-background placeholder:text-neutral-500 focus:border-neutral-300 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50"
	if hasError {
		class += " border-red-500"
	} else {
		class += " border-input"
	}
	return templ.Attributes{
		"class": class,
	}
}
